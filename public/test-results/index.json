{
  "stats": {
    "suites": 12,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2019-06-08T19:39:52.901Z",
    "end": "2019-06-08T19:39:54.753Z",
    "duration": 1852,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "536f61b2-cf20-4d8b-8150-c92a730eaceb",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "eb057413-f192-408b-ad05-86afb5a6e767",
        "title": "Basics: Inputs",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_basics.ts",
        "file": "/test/test_basics.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deserialize input",
            "fullTitle": "Basics: Inputs Deserialize input",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"Basic\",\n    version: \"1\",\n    inputs: [{ name: \"Name\", dataType: author_1.DataTypeEnum.String }],\n    outputs: [{ name: \"FullName\", code: \"Name + ' ' + LastName\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar BOM = decisionObject.generateSampleBOM();\nchai_1.expect(BOM.getValue(\"Name\")).to.equal(\"A string\");",
            "err": {},
            "isRoot": false,
            "uuid": "aae17fb6-06c1-4003-9851-2de8922131c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Procedurally add input",
            "fullTitle": "Basics: Inputs Procedurally add input",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"Basic\",\n    version: \"1\",\n    inputs: [{ name: \"Name\", dataType: author_1.DataTypeEnum.String }],\n    outputs: [{ name: \"FullName\", code: \"Name + ' ' + LastName\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\ndecisionObject.builder.withInput(\"LastName\").asString(\"Geldenhuys\");\nvar BOM = decisionObject.generateSampleBOM();\nchai_1.expect(BOM.getValue(\"LastName\")).to.equal(\"Geldenhuys\");",
            "err": {},
            "isRoot": false,
            "uuid": "f1af9aee-7ca3-4692-88b3-a3cd3c476f32",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deserialize output",
            "fullTitle": "Basics: Inputs Deserialize output",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"Basic\",\n    version: \"1\",\n    inputs: [{ name: \"Name\", dataType: author_1.DataTypeEnum.String, mockValue: \"'Herman'\" }, { name: \"LastName\", dataType: author_1.DataTypeEnum.String, mockValue: \"'Geldenhuys'\" }],\n    outputs: [{ name: \"FullName\", code: \"Name + ' ' + LastName\", dataType: author_1.DataTypeEnum.String }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar BOM = decisionObject.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run();\nchai_1.expect(BOM.getValue(\"FullName\")).to.equal(\"Herman Geldenhuys\");",
            "err": {},
            "isRoot": false,
            "uuid": "54da3ca8-22df-49cc-babd-28b5aac35cc8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Procedurally add output",
            "fullTitle": "Basics: Inputs Procedurally add output",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"Basic\",\n    version: \"1\",\n    inputs: [{ name: \"Name\", dataType: author_1.DataTypeEnum.String, mockValue: \"'Hendrik'\" }, { name: \"LastName\", dataType: author_1.DataTypeEnum.String, mockValue: \"'Geldenhuys'\" }],\n    outputs: []\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\ndecisionObject.builder.withOutput(\"FullName\").asString().usingCode(\"Name + ' ' + LastName\");\nvar BOM = decisionObject.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run({ withStats: false });\nchai_1.expect(BOM.getValue(\"FullName\")).to.equal(\"Hendrik Geldenhuys\");",
            "err": {},
            "isRoot": false,
            "uuid": "93f26322-0ddf-42e2-be09-2ad53b35d47a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Schema Version Hash",
            "fullTitle": "Basics: Inputs Schema Version Hash",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: []\n});\nchai_1.expect(ruleSet.generateSampleBOM().SchemaVersion).to.equals(\"d41d8cd98f00b204e9800998ecf8427e\");",
            "err": {},
            "isRoot": false,
            "uuid": "2e276192-0361-44ae-8574-5dadd35df102",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "DataTypes",
            "fullTitle": "Basics: Inputs DataTypes",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: [],\n    ruleContext: {\n        name: \"Testing\",\n        enumerations: [{\n                name: \"Colour\",\n                values: [{\n                        value: \"Green\"\n                    }]\n            }]\n    }\n});\nruleSet.builder\n    .withInput(\"AString\").asString(\"ABC\").comma()\n    .withInput(\"ADecimal\").asDecimal(12.3).comma()\n    .withInput(\"AnInteger\").asInteger(123).comma()\n    .withInput(\"ABoolean\").asBoolean(true).comma()\n    .withInput(\"ADate\").asDate().comma()\n    .withInput(\"AnEnum\").asEnum(\"Colour\", \"Green\").comma()\n    .withInput(\"AList\").asList([123, 456]).comma()\n    .withInput(\"AnObject\").asObject({ abc: 123 });\nchai_1.expect(ruleSet.getInput(\"AString\").dataType).to.equals(author_1.DataTypeEnum.String);\nchai_1.expect(ruleSet.getInput(\"ADecimal\").dataType).to.equals(author_1.DataTypeEnum.Decimal);\nchai_1.expect(ruleSet.getInput(\"AnInteger\").dataType).to.equals(author_1.DataTypeEnum.Integer);\nchai_1.expect(ruleSet.getInput(\"ABoolean\").dataType).to.equals(author_1.DataTypeEnum.Boolean);\nchai_1.expect(ruleSet.getInput(\"ADate\").dataType).to.equals(author_1.DataTypeEnum.Date);\nchai_1.expect(ruleSet.getInput(\"AnEnum\").dataType).to.equals(author_1.DataTypeEnum.Enum);\nchai_1.expect(ruleSet.getInput(\"AList\").dataType).to.equals(author_1.DataTypeEnum.List);\nchai_1.expect(ruleSet.getInput(\"AnObject\").dataType).to.equals(author_1.DataTypeEnum.Object);\nruleSet.builder\n    .withInput(\"AnObject\").remove().withInput(\"AString\").remove();\nchai_1.expect(ruleSet.getInput(\"AString\")).to.equals(undefined);\nchai_1.expect(ruleSet.getInput(\"AnObject\")).to.equals(undefined);",
            "err": {},
            "isRoot": false,
            "uuid": "f4b1fac7-333c-49df-9eae-bb9ddf3ca08f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Calculating Peekaboo",
            "fullTitle": "Basics: Inputs Calculating Peekaboo",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: []\n});\nruleSet.builder\n    .withInput(\"PeekA\").asString(\"BOO\").comma()\n    .withInput(\"options.ABoolean\").asBoolean(true).comma()\n    .withOutput(\"I\").usingCode(\"'See You!'\");\nvar decisionObject = new author_1.DecisionObject(undefined, ruleSet);\nvar bom = ruleSet.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, bom, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(\"See You!\");",
            "err": {},
            "isRoot": false,
            "uuid": "08a2027b-0bf9-4cb8-8a16-b4a7b86fb875",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Calculating Peekaboo with 1 conditional true then false",
            "fullTitle": "Basics: Inputs Calculating Peekaboo with 1 conditional true then false",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: []\n});\nruleSet.builder\n    .withInput(\"PeekA\").asString(\"BOO\").comma()\n    .withInput(\"options.ABoolean\").asBoolean(true).comma()\n    .withOutput(\"I\").usingCode(\"'See You!'\");\nvar bom = ruleSet.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(\"See You!\");\nruleSet.builder\n    .withOutput(\"I\").ifTrueThat(\"ABoolean\");\nbom = ruleSet.generateSampleBOM();\nengine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(\"See You!\");\nbom = ruleSet.generateSampleBOM();\nbom.setValue(\"options.ABoolean\", false);\nengine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(undefined);",
            "err": {},
            "isRoot": false,
            "uuid": "9576e59e-e1e8-4e2e-9d2f-68d555c97802",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Calculating Peekaboo with multiple conditional",
            "fullTitle": "Basics: Inputs Calculating Peekaboo with multiple conditional",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: [],\n    name: \"Peekaboo\"\n});\nruleSet.builder\n    .withInput(\"PeekA\").asString(\"BOO\").comma()\n    .withInput(\"options.ABoolean\").asBoolean(true).comma()\n    .withOutput(\"I\").usingCode(\"'See You!'\")\n    .ifTrueThat(\"ABoolean\").and()\n    .ifTrueThat(\"PeekA==='BOO'\");\nvar bom = ruleSet.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(\"See You!\");\nruleSet.builder\n    .withOutput(\"I\");\nbom = ruleSet.generateSampleBOM();\nengine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run();\nchai_1.expect(bom.getValue(\"I\")).to.equals(\"See You!\");\nbom = ruleSet.generateSampleBOM();\nbom.setValue(\"options.ABoolean\", false);\nengine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, bom, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(bom.getValue(\"I\")).to.equals(undefined);\nchai_1.expect(bom.getValue(\"engine.Peekaboo.conditions.I_1_ABooleanIsTrue\")).to.equals(false);\nchai_1.expect(bom.getValue(\"engine.Peekaboo.conditions.I_2_PeekAIsEqualTo_BOO_IsTrue\")).to.equals(true);",
            "err": {},
            "isRoot": false,
            "uuid": "a4d80ccd-e01d-409b-9c8a-3f316b2d0796",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "aae17fb6-06c1-4003-9851-2de8922131c7",
          "f1af9aee-7ca3-4692-88b3-a3cd3c476f32",
          "54da3ca8-22df-49cc-babd-28b5aac35cc8",
          "93f26322-0ddf-42e2-be09-2ad53b35d47a",
          "2e276192-0361-44ae-8574-5dadd35df102",
          "f4b1fac7-333c-49df-9eae-bb9ddf3ca08f",
          "08a2027b-0bf9-4cb8-8a16-b4a7b86fb875",
          "9576e59e-e1e8-4e2e-9d2f-68d555c97802",
          "a4d80ccd-e01d-409b-9c8a-3f316b2d0796"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 19,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab42ff58-4132-42d8-b8a8-2235721f2b49",
        "title": "Retirement: DecisionObject",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_decisionobject.ts",
        "file": "/test/test_decisionobject.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "10 years to go if retirement age is 60",
            "fullTitle": "Retirement: DecisionObject 10 years to go if retirement age is 60",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 50, AgeToRetirement: RETIREMENT_AGE };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisionobject_1.yearsToGo.path];\nchai_1.expect(result).to.equal(10);",
            "err": {},
            "isRoot": false,
            "uuid": "b1f86c75-944d-47f0-937d-26175be31082",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Can retire, at last at 61",
            "fullTitle": "Retirement: DecisionObject Can retire, at last at 61",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 61, AgeToRetirement: RETIREMENT_AGE };\nengine.withBom(BOM).run({ withStats: true });\nvar result = BOM[setup_decisionobject_1.canRetire.path];\nchai_1.expect(result).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "731aa13f-462c-4fa2-a4c4-51106514d3c6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b1f86c75-944d-47f0-937d-26175be31082",
          "731aa13f-462c-4fa2-a4c4-51106514d3c6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7bd37384-e002-45b8-b30c-1c76f9a7dd7f",
        "title": "Eligibility: DecisionTable",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_decisiontables.ts",
        "file": "/test/test_decisiontables.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "11 year old female  = x",
            "fullTitle": "Eligibility: DecisionTable 11 year old female  = x",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 11, Gender: \"Female\" };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisiontable_1.eligibleOutput.path];\nchai_1.expect(result).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "2530d839-e1e7-448c-b76c-d5c11a0bc786",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "13 year old male    = x",
            "fullTitle": "Eligibility: DecisionTable 13 year old male    = x",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 13, Gender: \"Male\" };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisiontable_1.eligibleOutput.path];\nchai_1.expect(result).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "8137a263-4085-4ff8-998a-c39e7244b87e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "18 year old female  = ✓",
            "fullTitle": "Eligibility: DecisionTable 18 year old female  = ✓",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 18, Gender: \"Female\" };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisiontable_1.eligibleOutput.name];\nchai_1.expect(result).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "ed5e4d14-47bd-44bb-ba07-03f8805bcaab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "18 year old male    = x",
            "fullTitle": "Eligibility: DecisionTable 18 year old male    = x",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 18, Gender: \"Male\" };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisiontable_1.eligibleOutput.path];\nchai_1.expect(result).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "ee2d7721-4274-401b-9f61-1786182fe7bf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "21 year old male    = ✓",
            "fullTitle": "Eligibility: DecisionTable 21 year old male    = ✓",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { Age: 21, Gender: \"Male\" };\nengine.withBom(BOM).run();\nvar result = BOM[setup_decisiontable_1.eligibleOutput.path];\nchai_1.expect(result).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "55567792-7b1e-4112-bdd3-887d76358f2e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "18 year old them    = x",
            "fullTitle": "Eligibility: DecisionTable 18 year old them    = x",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var bom = { Age: 18, Gender: \"Any\" };\nengine.withBom(bom).run();\nvar result = bom[setup_decisiontable_1.eligibleOutput.path];\nchai_1.expect(result).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "c52211f3-95a5-4d0f-acd9-f052052a33e3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2530d839-e1e7-448c-b76c-d5c11a0bc786",
          "8137a263-4085-4ff8-998a-c39e7244b87e",
          "ed5e4d14-47bd-44bb-ba07-03f8805bcaab",
          "ee2d7721-4274-401b-9f61-1786182fe7bf",
          "55567792-7b1e-4112-bdd3-887d76358f2e",
          "c52211f3-95a5-4d0f-acd9-f052052a33e3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d691c517-fea9-4d19-871d-358ad5bf81b6",
        "title": "DecisionTables: Russian Nesting Dolls",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_decisiontables.ts",
        "file": "/test/test_decisiontables.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Small Doll (1 level)",
            "fullTitle": "DecisionTables: Russian Nesting Dolls Small Doll (1 level)",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { StartWith: 0, Size: \"Small\", DollsInsideAndIncludingMe: undefined };\nsmallTable = new author_1.MultiAxisTable(undefined, small);\nvar engine = new rulesengine_1.Rulesengine(smallTable.getRules().rules, BOM, smallTable.name, smallTable.version, smallTable.schemaVersion(), smallTable.getInputNames());\nengine.run();\nvar result = BOM.DollsInsideAndIncludingMe;\nchai_1.expect(result).to.equal(1);",
            "err": {},
            "isRoot": false,
            "uuid": "57207cc1-de11-404b-a97d-1e1874e4c953",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Add Small Doll inside Medium Doll (2 levels)",
            "fullTitle": "DecisionTables: Russian Nesting Dolls Add Small Doll inside Medium Doll (2 levels)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "BOM = { StartWith: 0, Size: \"Big\" };\nmiddle.outputs.push({\n    decisionObject: small,\n    inputMappings: [{ To: \"StartWith\", From: \"StartWith\" }, { From: \"Size\", To: \"Size\" }],\n    name: \"SmallDoll\",\n    path: \"SmallDoll\",\n    conditions: [],\n    ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n    mockValue: undefined,\n    definition: \"\",\n    rawValue: true,\n    code: \"StartWith + 1\",\n    dataType: author_1.DataTypeEnum.Object\n});\nmiddle.outputs[0].code = \"SmallDoll.DollsInsideAndIncludingMe + 1\";",
            "err": {},
            "isRoot": false,
            "uuid": "aed32300-e77a-4c60-9135-a67c6342ed9f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Add Medium Doll inside BigDoll (3 levels)",
            "fullTitle": "DecisionTables: Russian Nesting Dolls Add Medium Doll inside BigDoll (3 levels)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "big.outputs.push({\n    decisionObject: middle,\n    inputMappings: [{ To: \"StartWith\", From: \"StartWith\" }, { From: \"Size\", To: \"Size\" }],\n    name: \"MediumDoll\",\n    path: \"MediumDollPath\",\n    conditions: [],\n    ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n    mockValue: undefined,\n    definition: \"\",\n    rawValue: true,\n    code: \"StartWith + 1\",\n    dataType: author_1.DataTypeEnum.Object\n});\nbig.outputs[0].code = \"MediumDoll.DollsInsideAndIncludingMe + 1\";",
            "err": {},
            "isRoot": false,
            "uuid": "69028e9f-afd4-4452-a0a4-6d64de8d991f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Add Big Doll",
            "fullTitle": "DecisionTables: Russian Nesting Dolls Add Big Doll",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "middleTable = new author_1.MultiAxisTable(undefined, middle);\nvar sampleBOM = middleTable.generateSampleBOM(true);\nvar engine = new rulesengine_1.Rulesengine(middleTable.getRules().rules, sampleBOM, middleTable.name, middleTable.version, middleTable.schemaVersion(), middleTable.getInputNames());\nengine.run();\nchai_1.expect(sampleBOM.SmallDoll.DollsInsideAndIncludingMe).to.equal(2);\nbigTable = new author_1.MultiAxisTable(undefined, big);",
            "err": {},
            "isRoot": false,
            "uuid": "f840fecc-3eb3-485e-ae72-320e182c1080",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Unpack the dolls",
            "fullTitle": "DecisionTables: Russian Nesting Dolls Unpack the dolls",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var engine = new rulesengine_1.Rulesengine(bigTable.getRules().rules, BOM, bigTable.name, bigTable.version, bigTable.schemaVersion(), bigTable.getInputNames());\nengine.run({ withStats: true });\nvar result = BOM.DollsInsideAndIncludingMe;\nchai_1.expect(result).to.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "2082aaba-46b2-4e6b-916e-a75c7a001d5a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "57207cc1-de11-404b-a97d-1e1874e4c953",
          "aed32300-e77a-4c60-9135-a67c6342ed9f",
          "69028e9f-afd4-4452-a0a4-6d64de8d991f",
          "f840fecc-3eb3-485e-ae72-320e182c1080",
          "2082aaba-46b2-4e6b-916e-a75c7a001d5a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 56,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6bd7bcc7-ae16-4e92-9c60-01ad4722c08e",
        "title": "Single-Axis Table",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_decisiontables.ts",
        "file": "/test/test_decisiontables.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Vertical Flight",
            "fullTitle": "Single-Axis Table Vertical Flight",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var vTable = new author_1.SingleAxisTable(undefined, {\n    entries: [\n        {\n            name: \"\",\n            outputs: [{\n                    name: \"SeatUpgrade\",\n                    code: \"'Approved'\"\n                }, {\n                    name: \"Points\",\n                    code: \"100\"\n                }],\n            conditions: [{\n                    name: \"Level\",\n                    expression: \"'Executive'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean\n                }, {\n                    name: \"FlightStatus\",\n                    expression: \"'International'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean\n                }]\n        },\n        {\n            name: \"\",\n            outputs: [{\n                    name: \"SeatUpgrade\",\n                    code: \"'Not Approved'\"\n                }, {\n                    name: \"Points\",\n                    code: \"50\"\n                }],\n            conditions: [{\n                    name: \"Level\",\n                    expression: \"'Manager'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean\n                }, {\n                    name: \"FlightStatus\",\n                    expression: \"'International'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean\n                }]\n        }\n    ],\n    version: \"1\",\n    ruleContext: {\n        name: \"Testing\",\n        enumerations: [{\n                name: \"Level\",\n                values: [{\n                        value: \"Executive\"\n                    }, {\n                        value: \"Manager\"\n                    }]\n            }, {\n                name: \"FlightStatus\",\n                values: [{\n                        value: \"International\"\n                    }, {\n                        value: \"Domestic\"\n                    }]\n            }]\n    },\n    name: \"VTable\",\n    inputs: [{\n            name: \"Level\",\n            dataType: author_1.DataTypeEnum.Enum,\n            enumerationSet: \"Level\",\n            mockValue: \"'Executive'\"\n        }, {\n            name: \"FlightStatus\",\n            dataType: author_1.DataTypeEnum.Enum,\n            enumerationSet: \"FlightStatus\",\n            mockValue: \"'International'\"\n        }],\n    outputs: [{\n            name: \"SeatUpgrade\"\n        }, {\n            name: \"Points\"\n        }],\n    parentName: \"\",\n    decisionObjectType: author_1.DecisionObjectType.SingleAxisTable,\n    purpose: \"\"\n});\nvar sampleBOM = vTable.generateSampleBOM(true);\nvar engine = new rulesengine_1.Rulesengine(vTable.getRules().rules, sampleBOM, vTable.name, vTable.version, vTable.schemaVersion(), vTable.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(sampleBOM.getValue(\"SeatUpgrade\")).to.equal(\"Approved\");\nvTable.getInput(\"Level\").mockValue = \"'Manager'\";\nsampleBOM = vTable.generateSampleBOM(true);\nengine.withBom(sampleBOM).run({ withStats: true });\nchai_1.expect(sampleBOM.getValue(\"SeatUpgrade\")).to.equal(\"Not Approved\");",
            "err": {},
            "isRoot": false,
            "uuid": "15f60e8f-9096-4d4c-8c20-13f734964dbf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "15f60e8f-9096-4d4c-8c20-13f734964dbf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dc9593b8-5d6d-444a-a578-d8272dfdc14d",
        "title": "Multi Axis Table Defaults",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_decisiontables.ts",
        "file": "/test/test_decisiontables.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "4 Defaults on Table, Row, Column and cell",
            "fullTitle": "Multi Axis Table Defaults 4 Defaults on Table, Row, Column and cell",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var elements = new author_1.MultiAxisTable(undefined, {\n    name: \"Defaults\",\n    version: \"0.1-in-house\",\n    purpose: \"All Purpose\",\n    decisionObjectType: author_1.DecisionObjectType.MultiAxisTable,\n    ruleContext: {\n        name: \"Default\",\n        enumerations: []\n    },\n    inputs: [],\n    outputs: [\n        {\n            name: \"Earth\",\n            dataType: author_1.DataTypeEnum.String,\n            mockValue: \"'EARTH'\",\n            code: \"'Earth is read from the Table'\"\n        },\n        {\n            name: \"Air\",\n            dataType: author_1.DataTypeEnum.String,\n            mockValue: \"'AIR'\",\n            code: \"'Table has Air'\"\n        },\n        {\n            name: \"Fire\",\n            dataType: author_1.DataTypeEnum.String,\n            mockValue: \"'FIRE'\",\n            code: \"'Table has Fire'\"\n        },\n        {\n            name: \"Water\",\n            dataType: author_1.DataTypeEnum.String,\n            mockValue: \"'WATER'\",\n            code: \"'Table has Water'\"\n        }\n    ],\n    columns: [\n        {\n            name: \"AlwaysTrue\",\n            conditions: [],\n            outputs: [\n                {\n                    name: \"Fire\",\n                    dataType: author_1.DataTypeEnum.String,\n                    mockValue: \"'FIRE'\",\n                    code: \"'Fire is read from Column'\"\n                }\n            ]\n        }\n    ],\n    rows: [\n        {\n            name: \"AlwaysTrue\",\n            conditions: [],\n            outputs: [{\n                    name: \"Air\",\n                    dataType: author_1.DataTypeEnum.String,\n                    mockValue: \"'AIR'\",\n                    code: \"'Air is read from Row'\"\n                }]\n        }\n    ],\n    cells: [{\n            columnNumber: 1,\n            rowNumber: 1,\n            outputs: [\n                {\n                    name: \"Water\",\n                    dataType: author_1.DataTypeEnum.String,\n                    mockValue: \"'WATER'\",\n                    code: \"'Water is read from Cell'\"\n                }\n            ]\n        }]\n});\nvar BOM = elements.generateSampleBOM();\nvar engine = new rulesengine_1.Rulesengine(elements.getRules().rules, BOM, elements.name, elements.version, elements.schemaVersion(), elements.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(BOM.getValue(\"Earth\")).to.equal(\"Earth is read from the Table\");\nchai_1.expect(BOM.getValue(\"Air\")).to.equal(\"Air is read from Row\");\nchai_1.expect(BOM.getValue(\"Fire\")).to.equal(\"Fire is read from Column\");\nchai_1.expect(BOM.getValue(\"Water\")).to.equal(\"Water is read from Cell\");",
            "err": {},
            "isRoot": false,
            "uuid": "e1d2b4f0-2a73-47aa-87e7-c8cde5b6ce74",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e1d2b4f0-2a73-47aa-87e7-c8cde5b6ce74"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 22,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ddd5e2d9-4bfa-4ff4-a89b-19847d0f061e",
        "title": "Exceptions",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_exceptions.ts",
        "file": "/test/test_exceptions.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Check Circular Reference",
            "fullTitle": "Exceptions Check Circular Reference",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"Basic\",\n    version: \"1\",\n    inputs: [],\n    outputs: [{ name: \"Calculation1\", code: \"Calculation2\", dataType: author_1.DataTypeEnum.String }, { name: \"Calculation2\", code: \"Calculation1\", dataType: author_1.DataTypeEnum.String }]\n};\nvar decisionObject = new author_1.DecisionObject(null, decisionObjectStructure);\ntry {\n    decisionObject.getRules();\n}\ncatch (error) {\n    chai_1.expect(error.toString()).contains(\"[RULE01]\");\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6793bea5-1f11-47e1-92bf-9a421d1638ce",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6793bea5-1f11-47e1-92bf-9a421d1638ce"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36d62033-3e20-4590-8a99-8997b274aacf",
        "title": "Map Functions: Map Run",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_mapfunctions.ts",
        "file": "/test/test_mapfunctions.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Map without path",
            "fullTitle": "Map Functions: Map Run Map without path",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"MapRun\",\n    version: \"1\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [\n    {\n        Name: \"Brand A\",\n        BrandIndex: 1\n    },\n    {\n        Name: \"Brand B\",\n        BrandIndex: 2\n    },\n    {\n        Name: \"Brand C\",\n        BrandIndex: 3\n    }\n];\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"MapRun\", \"1.0.0\"), newBomArray = engine.mapRun(bomArray, undefined, { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(bomArray.length, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[0].BrandPriority).to.equal(2, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "72e0ffae-d96a-44e6-bd30-462d20bbe6d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Map with path",
            "fullTitle": "Map Functions: Map Run Map with path",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"MapRun\",\n    version: \"2\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [\n    {\n        Name: \"Brand A\",\n        BrandIndex: 1\n    },\n    {\n        Name: \"Brand B\",\n        BrandIndex: 2\n    },\n    {\n        Name: \"Brand C\",\n        BrandIndex: 3\n    }\n];\nconsole.log(JSON.stringify(decisionObject.getRules(), null, 2));\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"MapRun\", \"2.0.0\");\nvar newBomArray = engine.mapRun(bomArray, \"bom.BrandPriority\");\nchai_1.expect(newBomArray.length).to.equal(bomArray.length, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[0]).to.equal(2, \"Map Run didn't detect value 0 in \" + JSON.stringify(newBomArray));",
            "err": {},
            "isRoot": false,
            "uuid": "45af696e-68bb-46f1-aa13-bca0afb99452",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Filter without path",
            "fullTitle": "Map Functions: Map Run Filter without path",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"FilterRun\",\n    version: \"2\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }, { name: \"Odd\", code: \"BrandIndex % 2 === 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [\n    {\n        Name: \"Brand A\",\n        BrandIndex: 1\n    },\n    {\n        Name: \"Brand B\",\n        BrandIndex: 2\n    },\n    {\n        Name: \"Brand C\",\n        BrandIndex: 3\n    }\n];\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"FilterRun\", \"2.0.0\");\nvar newBomArray = engine.filterRun(bomArray, \"bom.Odd === true\");\nchai_1.expect(newBomArray.length).to.equal(2, \"Filter Run didn't product the correct length of 2 but got \" + newBomArray.length);\nchai_1.expect(newBomArray[1].BrandPriority).to.equal(4, \"Filter Run didn't detect value 1.BrandPriority in \" + JSON.stringify(newBomArray));",
            "err": {},
            "isRoot": false,
            "uuid": "b04fe9dd-596d-4e29-bc9d-26ed135f617a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Filter with path",
            "fullTitle": "Map Functions: Map Run Filter with path",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"FilterRun\",\n    version: \"2\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }, { name: \"Odd\", code: \"BrandIndex % 2 === 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [\n    {\n        Name: \"Brand A\",\n        BrandIndex: 1\n    },\n    {\n        Name: \"Brand B\",\n        BrandIndex: 2\n    },\n    {\n        Name: \"Brand C\",\n        BrandIndex: 3\n    }\n];\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"FilterRun\", \"2.0.0\");\nvar newBomArray = engine.filterRun(bomArray, \"bom.Odd === true\", \"bom.BrandPriority\");\nchai_1.expect(newBomArray.length).to.equal(2, \"Filter Run didn't product the correct length of 2 but got \" + newBomArray.length);\nchai_1.expect(newBomArray[1]).to.equal(4, \"Filter Run didn't detect value 1 in \" + JSON.stringify(newBomArray));",
            "err": {},
            "isRoot": false,
            "uuid": "019268c9-fba9-4a51-8f34-f8e6ee7543e1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "72e0ffae-d96a-44e6-bd30-462d20bbe6d8",
          "45af696e-68bb-46f1-aa13-bca0afb99452",
          "b04fe9dd-596d-4e29-bc9d-26ed135f617a",
          "019268c9-fba9-4a51-8f34-f8e6ee7543e1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "afee8626-5244-4d74-9258-ed97a349f95d",
        "title": "Performance",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_performance.ts",
        "file": "/test/test_performance.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "1000 records getRules",
            "fullTitle": "Performance 1000 records getRules",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ruleSet = new author_1.RuleSet(undefined, {\n    inputs: [],\n    outputs: [],\n    name: \"Peekaboo\"\n});\nruleSet.builder\n    .withInput(\"Name\").asString(\"Herman\").thenNext()\n    .withInput(\"LastName\").asString(\"Geldenhuys\").thenNext()\n    .withInput(\"Age\").asInteger(33).thenNext()\n    .withOutput(\"FullName\").asString().withCode(\"Name + ' ' + LastName\").thenNext()\n    .withOutput(\"Summary\").withCode(\"FullName + ' is ' + Age + ' years old.'\");\nvar BOM = { Name: \"Herman\", LastName: \"Geldenhuys\", Age: 33, Summary: undefined };\nvar engine = new rulesengine_1.Rulesengine(ruleSet.getRules().rules, BOM, ruleSet.name, ruleSet.version, ruleSet.schemaVersion(), ruleSet.getInputNames());\nvar start = new Date();\nfor (var iterator = 0; iterator < 1000; iterator++) {\n    BOM = { Name: \"Herman\", LastName: \"Geldenhuys\", Age: iterator, Summary: undefined };\n    engine.withBom(BOM).run();\n}\nvar took = (new Date()).getTime() - start.getTime();\nconsole.log(\"took: \" + took);\nchai_1.expect(BOM.Summary).to.equal(\"Herman Geldenhuys is 999 years old.\");\nchai_1.expect(took).to.lessThan(40);",
            "err": {},
            "isRoot": false,
            "uuid": "8f5e1d58-b9e6-48fb-85b6-1ce5cdaa99a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Performance: 100 000 - Map without path",
            "fullTitle": "Performance Performance: 100 000 - Map without path",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"MapRun\",\n    version: \"1\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [];\nfor (var index = 0; index < 100000; index++) {\n    bomArray.push({\n        Name: \"Brand \" + index,\n        BrandIndex: index\n    });\n}\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"MapRun\", \"1.0.0\"), newBomArray = engine.mapRun(bomArray, undefined, { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(bomArray.length, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[10000].BrandPriority).to.equal(10001, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "8d135c09-9173-4b78-aa6a-9fe0845b6431",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Performance: 100 000 - Map without path Using complex model",
            "fullTitle": "Performance Performance: 100 000 - Map without path Using complex model",
            "timedOut": false,
            "duration": 586,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"MapRun\",\n    version: \"1\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }, { name: \"Odd\", code: \"BrandIndex % 2 === 1\" }, { name: \"Even\", code: \"!Odd\" }, { name: \"Complex\", code: \"Odd + ':' + Even + ':' + BrandPriority\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [];\nfor (var index = 0; index < 100000; index++) {\n    bomArray.push({\n        Name: \"Brand \" + index,\n        BrandIndex: index\n    });\n}\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"MapRun\", \"1.0.0\"), newBomArray = engine.mapRun(bomArray, undefined, { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(bomArray.length, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[10000].BrandPriority).to.equal(10001, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "ce8bc590-0a40-4154-bd0d-fe36f0c6c81a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Performance: 100 000 - Map with path",
            "fullTitle": "Performance Performance: 100 000 - Map with path",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"MapRun\",\n    version: \"1\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [];\nfor (var index = 0; index < 100000; index++) {\n    bomArray.push({\n        Name: \"Brand \" + index,\n        BrandIndex: index\n    });\n}\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"MapRun\", \"1.0.0\"), newBomArray = engine.mapRun(bomArray, \"bom.BrandPriority\", { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(bomArray.length, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[10000]).to.equal(10001, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "f2ca78c0-2e38-4130-b2ed-86e50cb049e0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Performance: 100 000 - Filter without path",
            "fullTitle": "Performance Performance: 100 000 - Filter without path",
            "timedOut": false,
            "duration": 272,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"FilterRun\",\n    version: \"1\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }, { name: \"Odd\", code: \"BrandIndex % 2 === 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [];\nfor (var index = 0; index < 100000; index++) {\n    bomArray.push({\n        Name: \"Brand \" + index,\n        BrandIndex: index\n    });\n}\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"FilterRun\", \"1.0.0\"), newBomArray = engine.filterRun(bomArray, \"bom.Odd === true\", undefined, { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(50000, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[10000].BrandPriority).to.equal(20002, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "f88ebbf6-2a2a-46c2-a1ef-efec1e6b46b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Performance: 100 000 - Filter with path",
            "fullTitle": "Performance Performance: 100 000 - Filter with path",
            "timedOut": false,
            "duration": 324,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decisionObjectStructure = {\n    name: \"FilterRun\",\n    version: \"2\",\n    inputs: [{ name: \"BrandIndex\", dataType: author_1.DataTypeEnum.Integer }],\n    outputs: [{ name: \"BrandPriority\", code: \"BrandIndex + 1\" }, { name: \"Odd\", code: \"BrandIndex % 2 === 1\" }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decisionObjectStructure);\nvar bomArray = [];\nfor (var index = 0; index < 100000; index++) {\n    bomArray.push({\n        Name: \"Brand \" + index,\n        BrandIndex: index\n    });\n}\nvar rules = decisionObject.getRules(), engine = new rulesengine_1.Rulesengine(rules.rules, {}, \"FilterRun\", \"2.0.0\"), newBomArray = engine.filterRun(bomArray, \"bom.Odd === true\", \"bom.BrandPriority\", { withStats: true });\nchai_1.expect(newBomArray.length).to.equal(50000, \"Map Run didn't product the correct length of \" + bomArray.length + \" but got \" + newBomArray.length);\nchai_1.expect(newBomArray[10000]).to.equal(20002, \"Map Run didn't detect BrandPriority in \" + JSON.stringify(newBomArray[0]));",
            "err": {},
            "isRoot": false,
            "uuid": "a3f41d95-fbdd-4ddc-aefb-dd882dc496b6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8f5e1d58-b9e6-48fb-85b6-1ce5cdaa99a0",
          "8d135c09-9173-4b78-aa6a-9fe0845b6431",
          "ce8bc590-0a40-4154-bd0d-fe36f0c6c81a",
          "f2ca78c0-2e38-4130-b2ed-86e50cb049e0",
          "f88ebbf6-2a2a-46c2-a1ef-efec1e6b46b8",
          "a3f41d95-fbdd-4ddc-aefb-dd882dc496b6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1717,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "25e06289-9093-4aca-8664-5fa2b8a25aa6",
        "title": "Schema: Input Paths",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_schema.ts",
        "file": "/test/test_schema.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Level 0 Input: Name=Ransom",
            "fullTitle": "Schema: Input Paths Level 0 Input: Name=Ransom",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decision = {\n    decisionObjectType: author_1.DecisionObjectType.RuleSet,\n    version: \"1\",\n    name: \"Schema\",\n    inputs: [{\n            mockValue: \"'Ransom'\",\n            definition: \"\",\n            path: \"Name\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Name\",\n        }],\n    outputs: [{\n            ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n            mockValue: undefined,\n            definition: \"\",\n            path: \"Echo.Echo\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Echo\",\n            decisionObject: undefined,\n            rawValue: false,\n            code: \"Name + Name\",\n            inputMappings: [],\n            conditions: []\n        }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decision), BOM = decisionObject.generateSampleBOM(), engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run();\nvar result = rulesengine_1.getBOMValue(BOM, \"bom.Name\");\nchai_1.expect(result).to.equal(\"Ransom\");",
            "err": {},
            "isRoot": false,
            "uuid": "2d3d3aee-540b-4bc4-89a4-6fe4cbe1f2bc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Level 1 Input: Client.Name=Ransom",
            "fullTitle": "Schema: Input Paths Level 1 Input: Client.Name=Ransom",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decision = {\n    decisionObjectType: author_1.DecisionObjectType.RuleSet,\n    version: \"1\",\n    name: \"Schema\",\n    inputs: [{\n            mockValue: \"'Ransom'\",\n            definition: \"\",\n            path: \"Client.Name\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Name\",\n        }],\n    outputs: [{\n            ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n            mockValue: undefined,\n            definition: \"\",\n            path: \"Echo.Echo\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Echo\",\n            decisionObject: undefined,\n            rawValue: false,\n            code: \"Name + Name\",\n            inputMappings: [],\n            conditions: [{\n                    to: undefined,\n                    includeTo: false,\n                    includeFrom: false,\n                    from: undefined,\n                    expression: \"Name === 'Ransom'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean,\n                    number: undefined,\n                    name: \"Name is Ransom\"\n                }]\n        }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decision);\nvar BOM = decisionObject.generateSampleBOM();\ndecisionObject = new author_1.DecisionObject(undefined, decision);\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Client.Name\")).to.equal(\"Ransom\");\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Echo.Echo\")).to.equal(\"RansomRansom\");\ndecision.outputs[0].conditions[0].expression = \"Name !== 'Ransom'\";\ndecisionObject = new author_1.DecisionObject(undefined, decision);\nBOM = decisionObject.generateSampleBOM();\nengine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Client.Name\")).to.equals(\"Ransom\");\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Echo.Echo\")).to.equals(undefined);",
            "err": {},
            "isRoot": false,
            "uuid": "6dcf2097-4861-43b7-af80-1882293870e9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2d3d3aee-540b-4bc4-89a4-6fe4cbe1f2bc",
          "6dcf2097-4861-43b7-af80-1882293870e9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "066039fc-7c44-484b-800d-ebd8a26a82ff",
        "title": "Conditions: Simple",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_schema.ts",
        "file": "/test/test_schema.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Boolean = true",
            "fullTitle": "Conditions: Simple Boolean = true",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decision = {\n    decisionObjectType: author_1.DecisionObjectType.RuleSet,\n    version: \"1\",\n    name: \"Schema\",\n    inputs: [{\n            mockValue: \"'Ransom'\",\n            definition: \"\",\n            path: \"Client.Name\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Name\",\n        }],\n    outputs: [{\n            ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n            mockValue: undefined,\n            definition: \"\",\n            path: \"Echo.Echo\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Echo\",\n            decisionObject: undefined,\n            rawValue: false,\n            code: \"Name + Name\",\n            inputMappings: [],\n            conditions: [{\n                    to: undefined,\n                    includeTo: false,\n                    includeFrom: false,\n                    from: undefined,\n                    expression: \"Name === 'Ransom'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean,\n                    number: undefined,\n                    name: \"Name is Ransom\"\n                }]\n        }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decision);\nvar BOM = decisionObject.generateSampleBOM();\ndecisionObject = new author_1.DecisionObject(undefined, decision);\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Client.Name\")).to.equal(\"Ransom\");\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.engine.Schema.conditions.Echo.Echo_1_Name_is_Ransom\")).to.equal(true);\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Echo.Echo\")).to.equal(\"RansomRansom\");",
            "err": {},
            "isRoot": false,
            "uuid": "b0e13469-1499-4753-9013-7324798a1d28",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Boolean = false",
            "fullTitle": "Conditions: Simple Boolean = false",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var decision = {\n    decisionObjectType: author_1.DecisionObjectType.RuleSet,\n    version: \"1\",\n    name: \"Schema\",\n    inputs: [{\n            mockValue: \"'Ransom'\",\n            definition: \"\",\n            path: \"Client.Name\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Name\",\n        }],\n    outputs: [{\n            ruleBehaviour: rulesengine_1.RuleBehaviour.Normal,\n            mockValue: undefined,\n            definition: \"\",\n            path: \"Echo.Echo\",\n            dataType: author_1.DataTypeEnum.String,\n            name: \"Echo\",\n            decisionObject: undefined,\n            rawValue: false,\n            code: \"Name + Name\",\n            inputMappings: [],\n            conditions: [{\n                    to: undefined,\n                    includeTo: false,\n                    includeFrom: false,\n                    from: undefined,\n                    expression: \"Name !== 'Ransom'\",\n                    conditionType: author_1.ConditionTypeEnum.Boolean,\n                    number: undefined,\n                    name: \"Name is Ransom\"\n                }]\n        }]\n};\nvar decisionObject = new author_1.DecisionObject(undefined, decision);\nvar BOM = decisionObject.generateSampleBOM();\ndecisionObject = new author_1.DecisionObject(undefined, decision);\nvar engine = new rulesengine_1.Rulesengine(decisionObject.getRules().rules, BOM, decisionObject.name, decisionObject.version, decisionObject.schemaVersion(), decisionObject.getInputNames());\nengine.run({ withStats: true });\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Client.Name\")).to.equal(\"Ransom\");\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.engine.Schema.conditions.Echo.Echo_1_Name_is_Ransom\")).to.equal(false);\nchai_1.expect(rulesengine_1.getBOMValue(BOM, \"bom.Echo.Echo\")).to.equals(undefined);",
            "err": {},
            "isRoot": false,
            "uuid": "1b755f8b-ebd5-4842-9972-ce8e182272bb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b0e13469-1499-4753-9013-7324798a1d28",
          "1b755f8b-ebd5-4842-9972-ce8e182272bb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b950b9c0-dada-4422-8a07-f3beabaf867d",
        "title": "Conditionals: GreaterThan, LessThan, Between, Outside",
        "fullFile": "/Users/hgeldenhuys/Documents/GitHub/omnirules/test/test_schema.ts",
        "file": "/test/test_schema.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GreaterThan",
            "fullTitle": "Conditionals: GreaterThan, LessThan, Between, Outside GreaterThan",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(BOM.Results.GreaterThan).to.equal(\"6 is greater than Bottom\");",
            "err": {},
            "isRoot": false,
            "uuid": "b5474802-256a-40e9-84d2-27e274c54b70",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "LessThan",
            "fullTitle": "Conditionals: GreaterThan, LessThan, Between, Outside LessThan",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(BOM.Results.LessThan).to.equal(\"6 is less than Top\");",
            "err": {},
            "isRoot": false,
            "uuid": "1c356d38-8b20-4cc9-8df0-4921ccb89d1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GreaterThan",
            "fullTitle": "Conditionals: GreaterThan, LessThan, Between, Outside GreaterThan",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(BOM.Results.GreaterThanOrEqualTo).to.equal(\"6 is greater than or equal to Bottom\");",
            "err": {},
            "isRoot": false,
            "uuid": "d6b4bd50-195d-4b27-9f80-168100f142a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "LessThan",
            "fullTitle": "Conditionals: GreaterThan, LessThan, Between, Outside LessThan",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(BOM.Results.LessThanOrEqualTo).to.equal(\"6 is less than or equal to Top\");",
            "err": {},
            "isRoot": false,
            "uuid": "efc4d987-842f-4c2c-883e-8e79c8967eae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Between",
            "fullTitle": "Conditionals: GreaterThan, LessThan, Between, Outside Between",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(BOM.Results.Between).to.equal(\"6 is between bom.Number.Bottom and Top\");",
            "err": {},
            "isRoot": false,
            "uuid": "e23c5247-9297-4739-8c84-c4c30054ed3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b5474802-256a-40e9-84d2-27e274c54b70",
          "1c356d38-8b20-4cc9-8df0-4921ccb89d1f",
          "d6b4bd50-195d-4b27-9f80-168100f142a0",
          "efc4d987-842f-4c2c-883e-8e79c8967eae",
          "e23c5247-9297-4739-8c84-c4c30054ed3b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}